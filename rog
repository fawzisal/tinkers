#!/bin/bash
#
# rog:  Find synonyms using Roget's thesaurus.
# 
# REQUIREMENTS: TBD
# 


q="$BASH_ARGV";
m=1
e=0
v_word=""
v_case="";
debug=0

help_string="
$bold rog$blank: Find synonyms using Roget's thesaurus.

$yellow USAGE: $blank
    $bold rog $blank [flags/options] [query]

$yellow FLAGS: $blank
    $green -l   $blank level of synonymity [1: exact, 2: near,
    				3: loose, 4: ≠ part of speech].
    $green -e   $blank exact match.
    $green -w   $blank require word boundaries.
    $green -i   $blank case sensitive search.
    $green -h   $blank show list of command-line options.

"

while getopts 'h-:eil:dw' opt; do
    case "${opt}" in
		e) e=1;;
		w) v_word="-w ";;
		i) v_case="";;
		l) m=$OPTARG;;
		d) debug=1;;
	    h|\?) printf "$help_string"; b_help="help"; exit 1;;
	    -) if [[ $OPTARG == "help" ]]; then printf "$help_string"; b_help="help"; exit 1; fi; ;;
	    *) echo "Unknown flag $OPTARG."; exit 1;;
  	esac
done

datadir="$DATAPATH"
if [[ -z "$datadir" ]]; then datadir=$(pwd); fi
. "$datadir/colors.sh";

m0=$[ m - 1 ];
if [[ "$e" == 1 ]]; then { prebase="<$q>"; }; else { prebase="$q"; }; fi
base=("ø[^øØ\n]*$prebase[^øØ\n]*Ø" "π[^π∏\n]*$prebase[^π∏\n]*∏"
	  "†[^†‡\n]*$prebase[^†‡\n]*‡" "^[^\n]*$prebase[^\n]*$");
postbase="${base[$m0]}";

if [[ "$debug" == 1 ]]; then {
	echo "base: $base";
	echo "prebase: $prebase";
}; fi

if [[ -z "$q" ]]; then {
	printf "$help_string";
}; else {
	rg -INo $v_case --pcre2 "$postbase" "$datadir/roget.md" |
		rg -IN $v_word "$q" |
		gsed 's/\t\(#.\+\) --/\n===== \1\t========================================/g' |
		gsed 's/>|/, /g' |
		# perl -0777 -pe 's/‡\n?†/\n ---------------------------------------- \n/g' |
		# gsed 's/\(“.*”\)/    \1\n/g' |
		gsed 's/\(“[^“”\n]*”\)/\n\n----- \1\n/g' |
		perl -0777 -pe 's/∏\n?π/\n\n/g' |
		gsed 's/;Øø/ || /g' |
		tr -d 'øπ†<>∏Ø‡≠' |
		perl -0777 -pe 's/;\n+/ || /g' |
		rg $i --passthru "$q" -;
	echo;
}; fi

# if [[ $m == 1 ]]; then {
# 	rg -INo --pcre2 "ø[^øØ\n]*$q[^øØ\n]*Ø" roget.md |
# 		gsed 's/>|/, /g' |
# 		gsed 's/;Øø/ || /g' |
# 		gsed 's/Ø/\n/g' |
# 		perl -0777 -pe 's/;\n+/ || /g' |
# 		tr -d 'ø<>Ø' |
# 		rg --passthru "$q" -;
# }; elif [[ $m == 2 ]]; then {
# 	rg -INo --pcre2 "π[^π∏\n]*$q[^π∏\n]*∏" roget.md |
# 		gsed 's/>|/, /g' |
# 		gsed 's/;Øø/ || /g' |
# 		perl -0777 -pe 's/∏\n?π/\n\n/g' |
# 		tr -d 'øπ<>∏Ø' |
# 		rg --passthru "$q" -;
# }; elif [[ $m == 3 ]]; then {
# }; fi

